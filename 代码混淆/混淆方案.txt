代码乱序：
1、把代码的分布打乱，并用跳转连起来
        a、使用无条件跳转
        b、使用有条件跳转，跳转条件由某些必为true的指令组成
2、把代码重构成一个方法
        a、注意goto的范围
        b、没被直接修改过的值才能作参数
        c、有被直接修改过的值的作用域要么为局部的，要么使用返回值来重新赋值
3、方法合并（把重构出来的方法进行合并）


代码变形：
1、把代码用相同功能的指令替换
 目前可用的方案：
    正常调用 --> 反射调用
    switch --> if else
    load1 load2 --> load2 load1 swap 
2、花指令：
push pop load store dup try throw catch checkcast 

example（无中生有，作用较少，先不做）:
[empty] --> push  pop
[empty] --> iload_x  pop
[empty] --> dup  pop
[empty] --> istore_2  iload_2
[empty] --> checkcast_object  checkcast_origin_class

方法隐藏（Dex层面）：
1、在调用的方法前先使用解密函数解密，再使用反射调用解密后的方法
        a、解密的时机
        b、加密的算法
2、关键地方改为JNI来调用，然后JNI中再调用真实的地方。
3、在运行时篡改Dex所在内存的方法代码区

过相似度检测方案
1、检测相似性是用两个应用的变量和每个变量出现次数的矩阵来比较的：
    把getfield、getstatic这两个调用随机的改为反射调用

2、根据代码流来比较方法的相似度：
    a、使用代码变形方案
    b、使用代码乱序方案
    d、运行时篡改代码区

3、根据API调用序列（无序）来识别
    使用方法隐藏方案（随机）



功能需求：
Java层或Dex层：
1、反射调用属性
2、反射调用方法
3、指令替换
4、花指令（不做）
5、重构方法
Dex层：
6、运行时篡改代码区
7、通过JNI间接调用
8、常量字符串加密
